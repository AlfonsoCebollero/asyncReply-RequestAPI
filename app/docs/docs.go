// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Alfonso Cebollero",
            "email": "alfonso.cebollero.acm@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/workflow/status/{workflowID}": {
            "get": {
                "description": "Responds with the status of the searched workflow",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WFStatusRetrieving"
                ],
                "summary": "Retrieves status of the workflow associated to the given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow ID",
                        "name": "workflowID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "response": {
                                            "$ref": "#/definitions/entities.WFRetrievingSuccessfulResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entities.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.APIError"
                        }
                    }
                }
            }
        },
        "/workflow/{workflowName}": {
            "post": {
                "description": "Receives a path param name, a query duration and, optionally, a query param task list name. With these a new workflow of the type that matches the name is created with the requested duration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WFCreation"
                ],
                "summary": "Creates new workflow if params are valid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow Name",
                        "name": "workflowName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Duration",
                        "name": "duration",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Task list name",
                        "name": "taskListName",
                        "in": "query"
                    }
                ],
                "responses": {
                    "220": {
                        "description": "",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entities.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "response": {
                                            "$ref": "#/definitions/entities.WFCreationSuccessfulResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entities.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entities.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.APIError": {
            "type": "object",
            "properties": {
                "response": {
                    "$ref": "#/definitions/entities.ErrorResponse"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "entities.APIResponse": {
            "type": "object",
            "properties": {
                "Response": {},
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "entities.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status-code": {
                    "type": "string"
                }
            }
        },
        "entities.WFCreationSuccessfulResponse": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status-code": {
                    "type": "string"
                },
                "workflow-id": {
                    "type": "string"
                },
                "workflow-run-id": {
                    "type": "string"
                },
                "workflow-status": {
                    "type": "string"
                }
            }
        },
        "entities.WFRetrievingSuccessfulResponse": {
            "type": "object",
            "properties": {
                "status-code": {
                    "type": "string"
                },
                "workflow-status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Async Reply-Request API",
	Description:      "Async Reply-Request API with cadence and gin-gonic",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
